-- Represent logical sentences as torch networks
require 'torch'
require 'nn'
require 'Term'


function get_network(num_entities)
   -- bill(x) & run(x)

   local bill = Term(num_entities)
   local run = Term(num_entities)

   local p = nn.ParallelTable()
   p:add(bill)
   p:add(run)

   local model = nn.Sequential()
   model:add(p)
   model:add(nn.JoinTable(2))

   -- conjunction
   model:add(nn.Min(2))

   -- assert true
   model:add(nn.Min(1))
   
   return model
end



-- local term = Term(5)
-- print(term.weight)

-- local next = term:forward()
-- print(next)

-- local grad = torch.Tensor(5):fill(1)

-- term:backward(nil, grad)
-- term:updateParameters(0.1)
-- print(term.weight)

function gradUpdate(mlp, learningRate) 
   local pred = mlp:forward{nil, nil}
   -- local pred = mlp:forward({torch.Tensor(5), torch.Tensor(5)})
   -- local err = criterion:forward(pred, y)
   -- local gradCriterion = criterion:backward(pred, y)
   mlp:zeroGradParameters()
   mlp:backward({nil, nil}, pred)
   mlp:updateParameters(learningRate)
end


model = get_network(5)
gradUpdate(model, 0.1)

print(model)
