-- Represent logical sentences as torch networks
require 'torch'
require 'nn'
require 'Term'
require 'Neg'

function gradUpdate(mlp, learningRate) 
   local pred = mlp:forward{nil, nil}
   mlp:zeroGradParameters()
   local grad = torch.zeros(1)
   if pred[1] < 0 then grad[1] = 1.0 end
   mlp:backward({nil, nil}, grad)
   mlp:updateParameters(learningRate)
   return grad[1]
end


-- Model definition
local bill = Term(5)
local run = Term(5)
local mary = Term(5)

-- exists(x, np(x) & vp(x))
function get_sentence(np, vp)
   local p = nn.ParallelTable()
   p:add(np)
   p:add(vp)

   local model = nn.Sequential()
   model:add(p)
   model:add(nn.JoinTable(2))

   -- conjunction
   model_min = nn.Min(2)
   model:add(model_min)

   -- existence
   model:add(nn.Max(1))
   return model
end


print("Initial Bill", bill)
print("Initial Mary", mary)
print("Initial run", run)

-- model = get_network(bill, run)
bill_runs = get_sentence(bill, run)
mary_runs = get_sentence(mary, run)
not_bill_and_mary = get_sentence(bill, mary)
not_bill_and_mary:add(Neg())
local sentences = {bill_runs, mary_runs, not_bill_and_mary}
for i=1,100 do
   permutation = torch.randperm(#sentences)
   print("Perm: ", permutation)
   max_grad = -1
   for j=1,#sentences do
      grad = gradUpdate(sentences[permutation[j]], 0.1)
      print("Sentence, grad", permutation[j], grad)
      if grad > max_grad then max_grad = grad end
   end
   -- print("Min", model_min.output)
   if max_grad <= 0 then break end
end

print("Bill", bill)
print("Mary", mary)
print("Run", run)
