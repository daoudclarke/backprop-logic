-- Represent logical sentences as torch networks
require 'torch'
require 'nn'
require 'Term'
require 'Neg'

function gradUpdate(mlp, learningRate) 
   local pred = mlp:forward{nil, nil}
   mlp:zeroGradParameters()
   local grad = torch.zeros(1)
   if pred[1] < 0 then grad[1] = 1.0 else grad[1] = 0.0 end
   mlp:backward({nil, nil}, grad)
   mlp:updateParameters(learningRate)
   return grad[1]
end

function randomUpdate(terms)
   for i, term in ipairs(terms) do
      term:reset()
   end
end

-- Model definition
local d = 5
local bill = Term(d)
local run = Term(d)
local mary = Term(d)

-- exists(x, pred1(x) & pred2(x))
function get_sentence(pred1, pred2)
   local p = nn.ParallelTable()
   p:add(pred1)
   p:add(pred2)

   local model = nn.Sequential()
   model:add(p)
   model:add(nn.JoinTable(2))

   -- conjunction
   model_min = nn.Min(2)
   model:add(model_min)

   -- existence
   model:add(nn.Max(1))
   return model
end

function satisfied(sentences)
   for i, sentence in ipairs(sentences) do
      local value = sentence:forward{nil, nil}
      if value[1] < 0 then return false end
   end
   return true
end

print("Initial Bill", bill)
print("Initial Mary", mary)
print("Initial run", run)

-- model = get_network(bill, run)
bill_runs = get_sentence(bill, run)
mary_runs = get_sentence(mary, run)
not_bill_and_mary = get_sentence(bill, mary)
not_bill_and_mary:add(Neg())
local sentences = {bill_runs, mary_runs, not_bill_and_mary}
for i=1,100 do
   permutation = torch.randperm(#sentences)
   local grad = 0
   for j=1,#sentences do
      if i % d == 0 then
	 randomUpdate{bill, mary, run}
      else
	 grad = gradUpdate(sentences[permutation[j]], 0.1)
      end
      print("Iteration:", i, "Sentence:", permutation[j], "grad:", grad)
   end
   -- print("Min", model_min.output)
   if satisfied(sentences) then break end
end

print("Bill", bill)
print("Mary", mary)
print("Run", run)
